// Tests if expr

code:
if true 
if true {} else = // '=' to avoid having a \n
if true do print "ok" }

errors:
ExpectBraceOrDo, if
ExpectExpr, =
ExpectNewLine

================

code:
if true { print "ok" }
if true {
    print "ok"
}

if true
{
    print "ok"
}
else print "ko"

if true {
    print "ok" } else {
    print "ko" }

expect:
[If
    condition:
    [Bool literal true]
    then body:
    [Block]
        [Print]
            [String literal "ok"]
    else body:
    none
]
[If
    condition:
    [Bool literal true]
    then body:
    [Block]
        [Print]
            [String literal "ok"]
    else body:
    none
]

[If
    condition:
    [Bool literal true]
    then body:
    [Block]
        [Print]
            [String literal "ok"]
    else body:
    [Print]
        [String literal "ko"]
]

[If
    condition:
    [Bool literal true]
    then body:
    [Block]
        [Print]
            [String literal "ok"]
    else body:
    [Block]
        [Print]
            [String literal "ko"]
]

================

// Condition as block

code:
if {
    print "in cond"
    false
}{
    print "ok"
}

expect:
[If
    condition:
    [Block]
        [Print]
            [String literal "in cond"]
        [Bool literal false]
    then body:
    [Block]
        [Print]
            [String literal "ok"]
    else body:
    none
]

================

// Do syntaxe

code:
if true do print "ok"

if true do print "ok"
else print "ko"

if true do print "ok"
else { print "ko" }

expect:
[If
    condition:
    [Bool literal true]
    then body:
    [Print]
        [String literal "ok"]
    else body:
    none
]

[If
    condition:
    [Bool literal true]
    then body:
    [Print]
        [String literal "ok"]
    else body:
    [Print]
        [String literal "ko"]
]

[If
    condition:
    [Bool literal true]
    then body:
    [Print]
        [String literal "ok"]
    else body:
    [Block]
        [Print]
            [String literal "ko"]
]

================

// Else if

code:
if true do print "ok"
else if true do print "elseif"
else print "ko"

expect:
[If
    condition:
    [Bool literal true]
    then body:
    [Print]
        [String literal "ok"]
    else body:
    [If
        condition:
        [Bool literal true]
        then body:
        [Print]
            [String literal "elseif"]
        else body:
        [Print]
            [String literal "ko"]
    ]
]

================

// If as expression

code:
var _res = if true do 5 else 10

expect:
[Var declaration _res, type void, value
    [If
        condition:
        [Bool literal true]
        then body:
        [Int literal 5]
        else body:
        [Int literal 10]
    ]
]

================

code:
_ = if true do 5 else 10

expect:
[Discard
    [If
        condition:
        [Bool literal true]
        then body:
        [Int literal 5]
        else body:
        [Int literal 10]
    ]
]

================

// Here, the if dosen't know it's an expression
code:
if { if true do true else false } do 5 else 10

expect:
[If
    condition:
    [Block]
        [If
            condition:
            [Bool literal true]
            then body:
            [Bool literal true]
            else body:
            [Bool literal false]
        ]
    then body:
    [Int literal 5]
    else body:
    [Int literal 10]
]

================
