// Tests function calls

// Global call

code:
fn add(a: int) {}
fn main() {
    add(2)
}

expect:
[Fn declaration add, index: 0, scope: Global, return kind: ImplicitVoid]
[Fn declaration main, index: 1, scope: Global, return kind: ImplicitVoid]
    [Fn call arity: 1, builtin: false]
        [Variable index: 0, scope: Global]
        - args:
        [Int 2]

================

// Local call

code:
fn main() {
    fn add(a: int) {}
    add(2)
}

expect:
[Fn declaration main, index: 0, scope: Global, return kind: ImplicitVoid]
    [Fn declaration add, index: 1, scope: Local, return kind: ImplicitVoid]
    [Fn call arity: 1, builtin: false]
        [Variable index: 1, scope: Local]
        - args:
        [Int 2]

================

// Args cast

code:
fn sub(a: int, b: float, c: float, d: bool, e: str) {}

fn main() {
    fn add(a: float, b: int, c: float, d: float, e: str) {}
    add(2, 3, 45, 67., "yup")
    sub(2, 3, 45, true, "yup")
}

expect:
[Fn declaration sub, index: 0, scope: Global, return kind: ImplicitVoid]
[Fn declaration main, index: 1, scope: Global, return kind: ImplicitVoid]
    [Fn declaration add, index: 1, scope: Local, return kind: ImplicitVoid]
    [Fn call arity: 5, builtin: false]
        [Variable index: 1, scope: Local]
        - args:
        [Int 2]
        [Cast to Float]
        [Int 3]
        [Int 45]
        [Cast to Float]
        [Float 67]
        [String yup]
    [Fn call arity: 5, builtin: false]
        [Variable index: 0, scope: Global]
        - args:
        [Int 2]
        [Int 3]
        [Cast to Float]
        [Int 45]
        [Cast to Float]
        [Bool true]
        [String yup]

================

// Errors

code:
fn add(arg1: str) {}
fn sub(arg1: float, args2: bool) {}


fn main() {
    add(1)
    add(1, 2)
    sub("true")
    var a = add("hoy")
}

error:
TypeMismatch, str, int
WrongFnArgsCount, 1, 2
WrongFnArgsCount, 2, 1
VoidAssignment

================


