// Tests function declaration

code:
fn add(a: int) {}
fn main() {}

expect:
[Fn declaration, scope Global, index 0, return ImplicitVoid]
[Fn declaration, scope Global, index 1, return ImplicitVoid]

================

// Locals

code:
fn get_bool() -> bool {
    true
}

fn main() {
    {
        fn another_bool(a: int, b: str) -> bool {
            var tmp = 5
            true or false
        }
    }
}

expect:
[Fn declaration, scope Global, index 0, return ImplicitValue]
[Fn declaration, scope Global, index 1, return ImplicitVoid]

[Block pop count 1]
[Fn declaration, scope Local, index 1, return ImplicitValue]
[Variable scope Local, index 3]
[Binop cast None, type bool]

================

// Nested

code:
fn main() {
    fn add(a:int, b:float) {
        fn sub(a:int) -> str {
            print a
            "yes"
        }

        _ = sub(1)
    }
}

expect:
[Fn declaration, scope Global, index 0, return ImplicitVoid]

// Add
[Fn declaration, scope Local, index 1, return ImplicitVoid]

// Sub
[Fn declaration, scope Local, index 3, return ImplicitValue]
[Variable scope Local, index 1]
// Fin sub

[Variable scope Local, index 3]
[Fn call, casts: []]
// Fin add

================

// Return kinds

code:
fn add() { return }
fn add1() -> int { 5 }
fn add2()  {  }
fn add3() -> int { return 5 }

fn main() { }

expect:
[Fn declaration, scope Global, index 0, return Explicit]
[Fn declaration, scope Global, index 1, return ImplicitValue]
[Fn declaration, scope Global, index 2, return ImplicitVoid]
[Fn declaration, scope Global, index 3, return Explicit]
[Fn declaration, scope Global, index 4, return ImplicitVoid]

================

// Errors

code:
fn add1(arg1: void) {}
fn add2(arg1: int, arg1: float) {}

fn add3() -> int {
    true
}

fn add4() {
    1+1
}

fn bis() {}
fn bis() {}
fn main() {}

error:
VoidParam
DuplicateParam, arg1
IncompatibleFnType, bool, int
IncompatibleFnType, int, void
AlreadyDeclared, bis

================

