// Tests function declaration

code:
fn add(a: int) {}
fn main() {}

expect:
[Fn declaration add, index: 0, scope: Global, return kind: ImplicitVoid]
[Fn declaration main, index: 1, scope: Global, return kind: ImplicitVoid]

================

// Locals

code:
fn get_bool() -> bool {
    true
}

fn main() {
    {
        fn another_bool(a: int, b: str) -> bool {
            var tmp = 5
            true or false
        }
    }
}

expect:
[Fn declaration get_bool, index: 0, scope: Global, return kind: ImplicitValue]
    [Bool true]
[Fn declaration main, index: 1, scope: Global, return kind: ImplicitVoid]
    [Block pop count: 1, is_expr: false]
        [Fn declaration another_bool, index: 1, scope: Local, return kind: ImplicitValue]
            [Variable declaration index: 3, scope: Local]
                [Int 5]
            [Binop type: Or, cast: None]
                [Bool true]
                [Bool false]

================

// Nested

code:
fn main() {
    fn add(a:int, b:float) {
        fn sub(a:int) -> str {
            print a
            "yes"
        }

        _ = sub(1)
    }
}

expect:
[Fn declaration main, index: 0, scope: Global, return kind: ImplicitVoid]
    [Fn declaration add, index: 1, scope: Local, return kind: ImplicitVoid]
        [Fn declaration sub, index: 3, scope: Local, return kind: ImplicitValue]
            [Print]
                [Variable index: 1, scope: Local]
            [String yes]
        [Discard]
            [Fn call arity: 1, builtin: false]
                [Variable index: 3, scope: Local]
                - args:
                [Int 1]

================

// Return kinds

code:
fn add() { return }
fn add1() -> int { 5 }
fn add2()  {  }
fn add3() -> int { return 5 }

fn main() { }

expect:
[Fn declaration add, index: 0, scope: Global, return kind: Explicit]
    [Return expr: false, cast: false]
[Fn declaration add1, index: 1, scope: Global, return kind: ImplicitValue]
    [Int 5]
[Fn declaration add2, index: 2, scope: Global, return kind: ImplicitVoid]
[Fn declaration add3, index: 3, scope: Global, return kind: Explicit]
    [Return expr: true, cast: false]
        [Int 5]
[Fn declaration main, index: 4, scope: Global, return kind: ImplicitVoid]

================

// Errors

code:
fn main() {}
fn add1(arg1: void) {}
fn add2(arg1: int, arg1: float) {}

fn add3() -> int {
    true
}

fn add4() {
    1+1
}

fn bis() {}
fn bis() {}

error:
VoidParam
DuplicateParam, arg1
IncompatibleFnType, int, bool
IncompatibleFnType, void, int
AlreadyDeclared, bis

================

