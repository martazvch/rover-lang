// Tests variable declaration type

code:
fn main() {
    {
        var loc1 = 1.5
        var loc2 = 5
        var _loc3 = -.5

        print _loc3 + loc1
    }
}

expect:
[Fn declaration main, index: 0, scope: Global, return kind: ImplicitVoid]
    [Block pop count: 3, is_expr: false]
        [Variable declaration index: 1, scope: Local]
            [Float 1.5]
        [Variable declaration index: 2, scope: Local]
            [Int 5]
        [Variable declaration index: 3, scope: Local]
            [Unary Minus]
                [Float 0.5]
        [Print]
            [Binop type: AddFloat, cast: None]
                [Variable index: 3, scope: Local]
                [Variable index: 1, scope: Local]

================

code:
fn main() {
    {
        var loc1 = 1.5
        var loc2 = 5
        var _loc3 = -.5

        print _loc3 + loc1

        {
            var loc1 = 6.
            var loc2 = 1.5

            print loc2 + loc1
            print loc1 + _loc3
        }

        print loc2
    }
}

expect:
[Fn declaration main, index: 0, scope: Global, return kind: ImplicitVoid]
    [Block pop count: 3, is_expr: false]
        [Variable declaration index: 1, scope: Local]
            [Float 1.5]
        [Variable declaration index: 2, scope: Local]
            [Int 5]
        [Variable declaration index: 3, scope: Local]
            [Unary Minus]
                [Float 0.5]
        [Print]
            [Binop type: AddFloat, cast: None]
                [Variable index: 3, scope: Local]
                [Variable index: 1, scope: Local]
        [Block pop count: 2, is_expr: false]
            [Variable declaration index: 4, scope: Local]
                [Float 6]
            [Variable declaration index: 5, scope: Local]
                [Float 1.5]
            [Print]
                [Binop type: AddFloat, cast: None]
                    [Variable index: 5, scope: Local]
                    [Variable index: 4, scope: Local]
            [Print]
                [Binop type: AddFloat, cast: None]
                    [Variable index: 4, scope: Local]
                    [Variable index: 3, scope: Local]
        [Print]
            [Variable index: 2, scope: Local]

================

code:
var glob = 1
var period = "."
var loc2 = "sneaky"

fn main() {
    {
        var loc1 = "local"
        var loc2 = " var"

        print loc1 + loc2 + period
    }
}

expect:
[Variable declaration index: 0, scope: Global]
    [Int 1]
[Variable declaration index: 1, scope: Global]
    [String .]
[Variable declaration index: 2, scope: Global]
    [String sneaky]
[Fn declaration main, index: 3, scope: Global, return kind: ImplicitVoid]
    [Block pop count: 2, is_expr: false]
        [Variable declaration index: 1, scope: Local]
            [String local]
        [Variable declaration index: 2, scope: Local]
            [String  var]
        [Print]
            [Binop type: AddStr, cast: None]
                [Binop type: AddStr, cast: None]
                    [Variable index: 1, scope: Local]
                    [Variable index: 2, scope: Local]
                [Variable index: 1, scope: Global]

================

code:
var loc2 = "sneaky"

fn main() {
    {
        var loc1 = "local"
        var loc2 = " var"

        loc2 = "assign local"
        {
            var loc2 = "sublocal"
            loc2 = "assign sub"
        }
        loc2 = loc1
    }
}

loc2 = "still glob"

expect:
[Variable declaration index: 0, scope: Global]
    [String sneaky]
[Fn declaration main, index: 1, scope: Global, return kind: ImplicitVoid]
    [Block pop count: 2, is_expr: false]
        [Variable declaration index: 1, scope: Local]
            [String local]
        [Variable declaration index: 2, scope: Local]
            [String  var]
        [Assignment index: 2, scope: Local]
            [String assign local]
        [Block pop count: 1, is_expr: false]
            [Variable declaration index: 3, scope: Local]
                [String sublocal]
            [Assignment index: 3, scope: Local]
                [String assign sub]
        [Assignment index: 2, scope: Local]
            [Variable index: 1, scope: Local]
[Assignment index: 0, scope: Global]
    [String still glob]

================

code:
var loc2 = "sneaky"
{
    var loc1 = "local"
    var loc1 = " var"
}

fn main() {}

error:
AlreadyDeclared, loc1
