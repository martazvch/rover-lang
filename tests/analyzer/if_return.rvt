// If epxressions with return scenarios

// Extras

code:
fn main() {
    // Only one path produces a value
    var a = if true { return } else 4
    var b = if false do 5 else return

    fn func(a: int) -> int {
        // Only one path generates a value, returns a value otherwise
        print if true do "str" else return a

        var tmp: str = if true do return a + 2 else {
            var local = 56.4
            "champ"
        }

        // If without else but not as last stmt
        if true do return 8

        return if true {
            if true {
                return { 1 }
            } else 5
        } else {
            if false {
                return if true { return 4 } else 3
            } else 8
        }
    }
}

expect:
[Fn declaration main, index: 0, scope: Global, return kind: ImplicitVoid]
    [Variable declaration index: 1, scope: Local]
        [If cast: None, has else: true]
        - condition:
            [Bool true]
        - then:
            [Block pop count: 0, is_expr: false]
                [Return expr: false]
        - else:
            [Int 4]
    [Variable declaration index: 2, scope: Local]
        [If cast: None, has else: true]
        - condition:
            [Bool false]
        - then:
            [Int 5]
        - else:
            [Return expr: false]
    [Fn declaration func, index: 3, scope: Local, return kind: Explicit]
        [Print]
            [If cast: None, has else: true]
            - condition:
                [Bool true]
            - then:
                [String str]
            - else:
                [Return expr: true]
                    [Variable index: 1, scope: Local]
        [Variable declaration index: 2, scope: Local]
            [If cast: None, has else: true]
            - condition:
                [Bool true]
            - then:
                [Return expr: true]
                    [Binop type: AddInt, cast: None]
                        [Variable index: 1, scope: Local]
                        [Int 2]
            - else:
                [Block pop count: 1, is_expr: true]
                    [Variable declaration index: 2, scope: Local]
                        [Float 56.4]
                    [String champ]
        [If cast: None, has else: false]
        - condition:
            [Bool true]
        - then:
            [Return expr: true]
                [Int 8]
        [Return expr: true]
            [If cast: None, has else: true]
            - condition:
                [Bool true]
            - then:
                [Block pop count: 0, is_expr: true]
                    [If cast: None, has else: true]
                    - condition:
                        [Bool true]
                    - then:
                        [Block pop count: 0, is_expr: true]
                            [Return expr: true]
                                [Block pop count: 0, is_expr: true]
                                    [Int 1]
                    - else:
                        [Int 5]
            - else:
                [Block pop count: 0, is_expr: true]
                    [If cast: None, has else: true]
                    - condition:
                        [Bool false]
                    - then:
                        [Block pop count: 0, is_expr: true]
                            [Return expr: true]
                                [If cast: None, has else: true]
                                - condition:
                                    [Bool true]
                                - then:
                                    [Block pop count: 0, is_expr: true]
                                        [Return expr: true]
                                            [Int 4]
                                - else:
                                    [Int 3]
                    - else:
                        [Int 8]

================

code:
fn main() {
    // First error, retuns an int
    var a = if true { return 1 } else 4
    // Second, same with str
    var b = if false do 5 else return "oui"

    // If without else in non-partial context
    var c = if true do 6

    fn func(a: int, b: float) -> int {
        // Returns b, which is a float
        print if true do "str" else return b

        var tmp: str = if true do return a + 2 else {
            var local = 56.4
            if false do "champ"
        }

        return if true {
            if true {
                return { 1. }
            } else 5
        } else {
            if false {
                return if true { return 4 } else 3
            } else 8
        }
    }

    fn func2() -> int {
        return if true {
            if true {
                return { 1 }
            } else 5
        } else {
            if false {
                return if true { return 4 } else 3.6
            } else 8
        }
    }
}

error:
IncompatibleFnType, void, int
// Because the if is corrupt, it produces this error on the first one too
IncompatibleIfType, void, int
IncompatibleFnType, void, str

// Partial if
MissingElseClause, int

// func return
IncompatibleFnType, int, float

// Partial if for tmp
MissingElseClause, str

// Nested if
IncompatibleFnType, int, float
// Here void because first nested return invalidates the whole if
// so analyze produces a "void" for then branch that is incompatible
// from function return type. After that, the else branch is skipped
IncompatibleFnType, int, void

// Func 2, very nested type error
IncompatibleFnType, int, float
// Same, because of first error, resulting type is void, so new error
IncompatibleFnType, int, void

================

