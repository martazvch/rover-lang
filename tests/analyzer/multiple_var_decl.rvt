// Tests multiple variable declaration

// Simple expressions

code:
fn main() {
    var a, b, c 
    var d, e, f = 1
    var g, h, i = 5, 6, 7
    var j, k: int
    var l, m, n: float= 5, 6, 7
}

expect:
[Fn declaration main, index: 0, scope: Global, return kind: ImplicitVoid]
    [Variable declaration index: 1, scope: Local]
        [Null]
    [Variable declaration index: 2, scope: Local]
        [Null]
    [Variable declaration index: 3, scope: Local]
        [Null]
    [Variable declaration index: 4, scope: Local]
        [Int 1]
    [Variable declaration index: 5, scope: Local]
        [Int 1]
    [Variable declaration index: 6, scope: Local]
        [Int 1]
    [Variable declaration index: 7, scope: Local]
        [Int 5]
    [Variable declaration index: 8, scope: Local]
        [Int 6]
    [Variable declaration index: 9, scope: Local]
        [Int 7]
    [Variable declaration index: 10, scope: Local]
        [Null]
    [Variable declaration index: 11, scope: Local]
        [Null]
    [Variable declaration index: 12, scope: Local]
        [Int 5]
        [Cast to Float]
    [Variable declaration index: 13, scope: Local]
        [Int 6]
        [Cast to Float]
    [Variable declaration index: 14, scope: Local]
        [Int 7]
        [Cast to Float]

================

// Complexe expressions

code:
fn add() -> int { 5 }

fn main() {
    var a, b = 1 * (56 - 2), add()
}

expect:
[Fn declaration add, index: 0, scope: Global, return kind: ImplicitValue]
    [Int 5]
[Fn declaration main, index: 1, scope: Global, return kind: ImplicitVoid]
    [Variable declaration index: 1, scope: Local]
        [Binop type: MulInt, cast: None]
            [Int 1]
            [Binop type: SubInt, cast: None]
                [Int 56]
                [Int 2]
    [Variable declaration index: 2, scope: Local]
        [Fn call arity: 0, builtin: false]
            [Variable index: 0, scope: Global]

================

// Multiple types

code:
fn sub() -> bool { false }

fn main() {
    var a, b = 1 * (56 - 2), sub()
    // Here b has been infered as bool
    b = 5
}

error:
InvalidAssignType, bool, int

================

// Mono type

code:
fn sub() -> bool { false }

fn main() {
    // Here both variables are integers
    var a, b: int = 1 * (56 - 2), sub()
}

error:
InvalidAssignType, int, bool

================

