// Tests assignment

code:
var noval
noval = 1

var noval_type : float
noval_type = .7

var noval_binop
noval_binop = 12/-.7

var noval_binop_typed: float
noval_binop_typed = 1/2

fn main() {}

expect:
[Variable declaration index: 0, scope: Global]
    [Null]
[Assignment index: 0, scope: Global]
    [Int 1]
[Variable declaration index: 1, scope: Global]
    [Null]
[Assignment index: 1, scope: Global]
    [Float 0.7]
[Variable declaration index: 2, scope: Global]
    [Null]
[Assignment index: 2, scope: Global]
    [Binop type: DivFloat, cast: Lhs]
        [Int 12]
        [Unary Minus]
            [Float 0.7]
[Variable declaration index: 3, scope: Global]
    [Null]
[Assignment index: 3, scope: Global]
    [Binop type: DivInt, cast: None]
        [Int 1]
        [Int 2]
    [Cast to Float]
[Fn declaration main, index: 4, scope: Global, return kind: ImplicitVoid]

================

// Type error

code:
var noval: int
noval = 1.4

fn main() {}

errors:
InvalidAssignType, int, float

================

// Implicit cast

code:
var noval: float
noval = 1

fn main() {}

expect:
[Variable declaration index: 0, scope: Global]
    [Null]
[Assignment index: 0, scope: Global]
    [Int 1]
    [Cast to Float]
[Fn declaration main, index: 1, scope: Global, return kind: ImplicitVoid]

================

// Locals

code:

fn main() {
    var noval: float
    noval = 1

    {
        var noval = 1
        print noval
    }
    print noval
}

expect:
[Fn declaration main, index: 0, scope: Global, return kind: ImplicitVoid]
    [Variable declaration index: 1, scope: Local]
        [Null]
    [Assignment index: 1, scope: Local]
        [Int 1]
        [Cast to Float]
    [Block pop count: 1, is_expr: false]
        [Variable declaration index: 2, scope: Local]
            [Int 1]
        [Print]
            [Variable index: 2, scope: Local]
    [Print]
        [Variable index: 1, scope: Local]

================

// Invalid assignment

code:
fn add() {}
fn main() {
    add = 1
    add() = 1
}

error:
InvalidAssignTarget
InvalidAssignTarget

================
