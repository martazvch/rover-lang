// Tests assignment

code:
var noval
noval = 1

var noval_type : float
noval_type = .7

var noval_binop
noval_binop = 12/-.7

var noval_binop_typed: float
noval_binop_typed = 1/2

fn main() {}

expect:
[Variable scope Global, index 0]
[Variable scope Global, index 0]

[Variable scope Global, index 1]
[Variable scope Global, index 1]

[Variable scope Global, index 2]
[Binop cast Lhs, type float]
[Unary type float]
[Variable scope Global, index 2]

[Variable scope Global, index 3]
[Binop cast None, type int]
[Assignment cast to float]
[Variable scope Global, index 3]

[Fn declaration, scope Global, index 4, return ImplicitVoid]

================

// Type error

code:
var noval: int
noval = 1.4

fn main() {}

errors:
InvalidAssignType, int, float

================

// Implicit cast

code:
var noval: float
noval = 1

fn main() {}

expect:
[Variable scope Global, index 0]
[Assignment cast to float]
[Variable scope Global, index 0]
[Fn declaration, scope Global, index 1, return ImplicitVoid]

================

// Locals

code:

fn main() {
    var noval: float
    noval = 1

    {
        var noval = 1
        print noval
    }
    print noval
}

expect:
[Fn declaration, scope Global, index 0, return ImplicitVoid]
[Variable scope Local, index 1]
[Assignment cast to float]
[Variable scope Local, index 1]

// Sub scope
[Block pop count 1]
[Variable scope Local, index 2]
[Variable scope Local, index 2]

// Exit sub scope
[Variable scope Local, index 1]

================
