// Tests type inference

code:
var a = 7.5 // float
var b: float = 1.2

fn main() {
    print a + b
}

// There is no cast in the binop
expect:
[Variable declaration index: 0, scope: Global]
    [Float 7.5]
[Variable declaration index: 1, scope: Global]
    [Float 1.2]
[Fn declaration main, index: 2, scope: Global, return kind: ImplicitVoid]
    [Print]
        [Binop type: AddFloat, cast: None]
            [Variable index: 0, scope: Global]
            [Variable index: 1, scope: Global]

================

code:
var res = true // bool

fn main() {
    print not res
}

// No errors
expect:
[Variable declaration index: 0, scope: Global]
    [Bool true]
[Fn declaration main, index: 1, scope: Global, return kind: ImplicitVoid]
    [Print]
        [Unary Bang]
            [Variable index: 0, scope: Global]

================

// Function's return

code:
fn get_bool() -> bool { return true }

fn main() {
    var a = get_bool() // infered as bool
    print not a // 'not' only allowed with booleans
}

// No errors
expect:
[Fn declaration get_bool, index: 0, scope: Global, return kind: Explicit]
    [Return expr: true]
        [Bool true]
[Fn declaration main, index: 1, scope: Global, return kind: ImplicitVoid]
    [Variable declaration index: 1, scope: Local]
        [Fn call arity: 0, builtin: false]
            [Variable index: 0, scope: Global]
    [Print]
        [Unary Bang]
            [Variable index: 1, scope: Local]

================

// Uninit error

code:
var a

var _empty: str

fn main() {
    print a + 1
    print _empty
}

error:
UseUninitVar, a
UseUninitVar, _empty

================

