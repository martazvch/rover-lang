// Tests type inference

code:
var a = 7.5 // float
var b: float = 1.2

fn main() {
    print a + b
}

// There is no cast in the binop
expect:
[Variable scope Global, index 0]
[Variable scope Global, index 1]
[Fn declaration, scope Global, index 2, return ImplicitVoid]
[Binop cast None, type float]
[Variable scope Global, index 0]
[Variable scope Global, index 1]

================

code:
var res = true // bool

fn main() {
    print not res
}

// No errors
expect:
[Variable scope Global, index 0]
[Fn declaration, scope Global, index 1, return ImplicitVoid]
[Unary type bool]
[Variable scope Global, index 0]

================

// Uninit error

code:
var a

var _empty: str

fn main() {
    print a + 1
    print _empty
}

error:
UseUninitVar, a
UseUninitVar, _empty

================

