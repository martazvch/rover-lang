// Tests imports
config:
ignore main-call

// Global use

code:
use std._test1

fn main() {
    print _cast_i2f(12)

    {
        print _cast_f2i(true, 5)
    }
}

expect:
[Use
    [Variable scope Global, index 0, builtin index 0]
    [Variable scope Global, index 1, builtin index 1]
]

// Main function
[Fn declaration, scope Global, index 2, return ImplicitVoid]
[Variable scope Global, index 0]
[Fn call, casts: [], builtin]

[Block pop count 0]
[Variable scope Global, index 1]
[Fn call, casts: [1], builtin]

================

// Local use

code:
fn main() {
    {
        use std._test1
        print _cast_f2i(false, 3.)
    }
    {
        var tmp = 1
        use std._test1
        print _cast_i2f(56)
    }

    // Reimport locally
    use std._test1
    {
        use std._test1
    }
}

expect:
// Main function
[Fn declaration, scope Global, index 0, return ImplicitVoid]

// 2 pops for the 2 imported functions in time
[Block pop count 2]
[Use
    [Variable scope Local, index 1, builtin index 0]
    [Variable scope Local, index 2, builtin index 1]
]

// Get the first one and call it
[Variable scope Local, index 2]
[Fn call, casts: [], builtin]

// Second scope: same but to see if "tmp" is taken into account
[Block pop count 3]
[Variable scope Local, index 1]
[Use
    [Variable scope Local, index 2, builtin index 0]
    [Variable scope Local, index 3, builtin index 1]
]

// Get the first one and call it
[Variable scope Local, index 2]
[Fn call, casts: [], builtin]

// Declare in main
[Use
    [Variable scope Local, index 1, builtin index 0]
    [Variable scope Local, index 2, builtin index 1]
]

// Redeclare in subscope
[Block pop count 2]
[Use
    [Variable scope Local, index 3, builtin index 0]
    [Variable scope Local, index 4, builtin index 1]
]

================

// Local use multiple imports

code:
use std._test1

fn main() {
    {
        use std._test2
        print _gt_f2i(false, "empty", 3.)

        // From _test1
        print _cast_f2i(false, 3.)
    }
    {
        var tmp = 1
        use std._test1
        print _cast_i2f(56)
    }

    // Reimport locally
    use std._test2
    {
        use std._test2
        use std._test1

        // From _test1
        print _cast_i2f(56)
        // From _test2
        print _gt_i2f(24, 3.)
    }
}

expect:
// Global scope
[Use
    [Variable scope Global, index 0, builtin index 0]
    [Variable scope Global, index 1, builtin index 1]
]

// Main function
[Fn declaration, scope Global, index 2, return ImplicitVoid]

// First block
[Block pop count 2]
[Use
    [Variable scope Local, index 1, builtin index 2]
    [Variable scope Local, index 2, builtin index 3]
]
[Variable scope Local, index 1]
[Fn call, casts: [], builtin]
[Variable scope Global, index 1]
[Fn call, casts: [], builtin]

// Second block
[Block pop count 3]
[Variable scope Local, index 1]
[Use
    [Variable scope Local, index 2, builtin index 0]
    [Variable scope Local, index 3, builtin index 1]
]
[Variable scope Local, index 2]
[Fn call, casts: [], builtin]

[Use
    [Variable scope Local, index 1, builtin index 2]
    [Variable scope Local, index 2, builtin index 3]
]

// Third block
[Block pop count 4]
[Use
    [Variable scope Local, index 3, builtin index 2]
    [Variable scope Local, index 4, builtin index 3]
]
[Use
    [Variable scope Local, index 5, builtin index 0]
    [Variable scope Local, index 6, builtin index 1]
]
[Variable scope Local, index 5]
[Fn call, casts: [], builtin]
[Variable scope Local, index 4]
[Fn call, casts: [], builtin]

================

code:
use std.blender
use ctd.blender

fn main() {
    {
        use std.time
    }

    print clock()
}

error:
UnknownModule, blender
UnknownModule, ctd
UndeclaredVar, clock

================

// Type checking

code:
use std._test1

fn main() {
    _cast_i2f(4.5)

    var res: bool = _cast_i2f(4)

    fn return_bool() -> bool {
        _cast_f2i(true, 2.)
    }

    _cast_f2i(true, "ok")
}

error:
TypeMismatch, int, float
InvalidAssignType, bool, float
IncompatibleFnType, bool, int
TypeMismatch, float, str

================

