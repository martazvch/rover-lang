// Tests imports

// Global use

code:
use std._test1

fn main() {
    print _cast_i2f(12)

    {
        print _cast_f2i(true, 5)
    }
}

expect:
[Use count: 2]
[Fn declaration main, index: 2, scope: Global, return kind: ImplicitVoid]
    [Print]
        [Fn call arity: 1, builtin: true]
            [Variable index: 0, scope: Global]
            - args:
            [Int 12]
    [Block pop count: 0, is_expr: false]
        [Print]
            [Fn call arity: 2, builtin: true]
                [Variable index: 1, scope: Global]
                - args:
                [Bool true]
                [Int 5]
                [Cast to Float]

================

// Local use

code:
fn main() {
    {
        use std._test1
        print _cast_f2i(false, 3.)
    }
    {
        var tmp = 1
        use std._test1
        print _cast_i2f(56)
    }

    // reimport locally
    use std._test1
    {
        use std._test1
    }
}

expect:
[Fn declaration main, index: 0, scope: Global, return kind: ImplicitVoid]
    [Block pop count: 2, is_expr: false]
        [Use count: 2]
        [Print]
            [Fn call arity: 2, builtin: true]
                [Variable index: 2, scope: Local]
                - args:
                [Bool false]
                [Float 3]
    [Block pop count: 3, is_expr: false]
        [Variable declaration index: 1, scope: Local]
            [Int 1]
        [Use count: 2]
        [Print]
            [Fn call arity: 1, builtin: true]
                [Variable index: 2, scope: Local]
                - args:
                [Int 56]
    [Use count: 2]
    [Block pop count: 2, is_expr: false]
        [Use count: 2]

================

// Local use multiple imports

code:
use std._test1

fn main() {
    {
        use std._test2
        print _gt_f2i(1, "empty", 3.)

        // From _test1
        print _cast_f2i(false, 3.)
    }
    {
        var tmp = 1
        use std._test1
        print _cast_i2f(56)
    }

    // Reimport locally
    use std._test2
    {
        use std._test2
        use std._test1

        // From _test1
        print _cast_i2f(56)
        // From _test2
        print _gt_i2f(24, 3.)
    }
}

expect:
[Use count: 2]
[Fn declaration main, index: 2, scope: Global, return kind: ImplicitVoid]
    [Block pop count: 2, is_expr: false]
        [Use count: 2]
        [Print]
            [Fn call arity: 3, builtin: true]
                [Variable index: 1, scope: Local]
                - args:
                [Int 1]
                [String empty]
                [Float 3]
        [Print]
            [Fn call arity: 2, builtin: true]
                [Variable index: 1, scope: Global]
                - args:
                [Bool false]
                [Float 3]
    [Block pop count: 3, is_expr: false]
        [Variable declaration index: 1, scope: Local]
            [Int 1]
        [Use count: 2]
        [Print]
            [Fn call arity: 1, builtin: true]
                [Variable index: 2, scope: Local]
                - args:
                [Int 56]
    [Use count: 2]
    [Block pop count: 4, is_expr: false]
        [Use count: 2]
        [Use count: 2]
        [Print]
            [Fn call arity: 1, builtin: true]
                [Variable index: 5, scope: Local]
                - args:
                [Int 56]
        [Print]
            [Fn call arity: 2, builtin: true]
                [Variable index: 4, scope: Local]
                - args:
                [Int 24]
                [Float 3]

================

code:
use std.blender
use ctd.blender

fn main() {
    {
        use std.time
    }

    print clock()
}

error:
UnknownModule, blender
UnknownModule, ctd
UndeclaredVar, clock

================

// Type checking

code:
use std._test1

fn main() {
    _cast_i2f(4.5)

    var res: bool = _cast_i2f(4)

    fn return_bool() -> bool {
        _cast_f2i(true, 2.)
    }

    _cast_f2i(true, "ok")
}

error:
TypeMismatch, int, float
InvalidAssignType, bool, float
IncompatibleFnType, bool, int
TypeMismatch, float, str

================

