// Implicit void return type
fn add() {}

var tmp = 1

// Implicit return
fn sub() -> int {
    return 56
}

fn main() {
    print add // expect: <fn add>
    print sub // expect: <fn sub>
    print add // expect: <fn add>

    // local declaration
    {
        var local = 56-6

        // explicit return
        fn mul() -> str {
            return "mul"
        }

        print sub // expect: <fn sub>
        print add // expect: <fn add>
        print mul // expect: <fn mul>
    }

    print sub // expect: <fn sub>
    print add // expect: <fn add>

    // With args, to see if it compiles well too and that args dosen't mess up stack
    fn fn1(a: int) {}
    fn fn2(a: int, b: float) -> str {
        return "booo"
    }

    // Trailing comma
    fn fn3(a: int,) {}

    print fn1 // expect: <fn fn1>
    print fn2 // expect: <fn fn2>
}
