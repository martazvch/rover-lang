use data.def_val

fn function(noval: str, arg1, arg2: int = 12, arg3 = 98.5) {
    print noval
    print arg1
    print arg2
    print arg3
}

struct Foo {
    fn staticFn(noval: str, arg1, arg2: int = 111, arg3 = 56.5) {
        print noval
        print arg1
        print arg2
        print arg3
    }

    fn method(self, noval: str, arg1, arg2: int = 2, arg3 = 8.5) {
        print noval
        print arg1
        print arg2
        print arg3
    }
}

fn main() {
    var func: fn(str, int, int, float)
    func = function
    func("first", 1, 2, 24.5)
    func("second")
    func("third", 8)
    func("fourth", arg3=123.456)
    func("fifth", arg3=12.34, arg1=80)
    func("sixth", arg2=54, arg1=65, arg3=3.14)

    func = Foo.staticFn
    func("first", 1, 2, 24.5)
    func("second")
    func("third", 8)
    func("fourth", arg3=123.456)
    func("fifth", arg3=12.34, arg1=80)
    func("sixth", arg2=54, arg1=65, arg3=3.14)

    var foo = Foo{}
    func = foo.method
    
    func("first", 1, 2, 24.5)
    func("second")
    func("third", 8)
    func("fourth", arg3=123.456)
    func("fifth", arg3=12.34, arg1=80)
    func("sixth", arg2=54, arg1=65, arg3=3.14)

    var imported = def_val.Def{}
    var func2 = def_val.Def.staticFn
    func2("imported static")
    func2("imported static", c=true, b=90)

    func2 = imported.method
    func2("imported method")
    func2("imported method", d=false, b=180)
}

