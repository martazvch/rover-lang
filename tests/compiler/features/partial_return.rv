fn main() {
    // Only one path produces a value
    var a = if false { return } else 4
    print a // expect: 4

    var b = if true do 5 else return
    print b // expect: 5

    fn func(a: int) -> int {
        // Only one path generates a value, returns a value otherwise
        print if true do "str" else return a // expect: "str"

        var tmp: str = if false do return a + 2 else {
            var local = 56.4
            break "champ"
        }

        print tmp // expect: "champ"

        // If without else but not as last stmt
        if false do return 8

        return if true {
            break if true {
                return { break 1 } // expect: 1
            } else 5
        } else {
            break if false {
                return if true { return 4 } else 3
            } else 8
        }
    }

    print func(5)

    // Mono branch exit
    fn shortcut(arg: float) -> float {
        if true { return arg }
        print "should not be seen"
        return 4.5
    }

    print shortcut(8.5) // expect: 8.5

    // Dual branch exit
    fn shortcut_bis(arg: float) -> float {
        if false {} else { return arg }
        print "should not be seen"
        return 0.01
    }

    print shortcut_bis(-18.5) // expect: -18.5

    // Complicated nested
    fn nested() -> int {
        return if false {
            break if true {
                return { break 1 }
            } else 5
        } else {
            break if true {
                return if false { return 4 } else 3
            } else 8
        }
    }

    print nested() // expect: 3
}
