// Function declaration

// Global scope

code:
fn add() {}
fn main() {}

// First for the 'add' implicit null return
// Then for the 'main' body
expect:
-- add --
OP_NULL
OP_RETURN

-- main --
OP_NULL
OP_RETURN

-- Global scope --
OP_CONSTANT index 0, value <fn add>
OP_DEFINE_GLOBAL index 0
OP_CONSTANT index 1, value <fn main>
OP_DEFINE_GLOBAL index 1
OP_GET_GLOBAL index 1
OP_CALL index 0

================

// Local scope

code:
fn main() {
    {
        fn add() {}
    }
}

expect:
-- add --
OP_NULL
OP_RETURN

-- main --
OP_CONSTANT index 0, value <fn add>
OP_POP
OP_NULL
OP_RETURN

-- Global scope --
OP_CONSTANT index 0, value <fn main>
OP_DEFINE_GLOBAL index 0
OP_GET_GLOBAL index 0
OP_CALL index 0

================

code:
fn add(a:int) {}
fn sub(a:int, b: float) -> int {
    5
}
fn main() {}

expect:
-- add --
OP_NULL
OP_RETURN

-- sub --
OP_CONSTANT index 0, value 5
OP_RETURN

-- main --
OP_NULL
OP_RETURN

-- Global scope --
OP_CONSTANT index 0, value <fn add>
OP_DEFINE_GLOBAL index 0
OP_CONSTANT index 1, value <fn sub>
OP_DEFINE_GLOBAL index 1

OP_CONSTANT index 2, value <fn main>
OP_DEFINE_GLOBAL index 2
OP_GET_GLOBAL index 2
OP_CALL index 0

================

