// Tests if

// Note:
//  - each jump count as 3 OP (the jump + 2x8bits jump value)
//  - OP count begins at 0
//  - we jump just after the other JUMP (on the POP) to exit the then branch

code:
fn main() {
    if true do print "yes"
}

expect:
-- main --
OP_TRUE
OP_JUMP_IF_FALSE 1 -> 11
OP_POP
OP_CONSTANT index 0, value "yes"
OP_PRINT
OP_JUMP 8 -> 12
OP_POP
OP_NULL
OP_RETURN

-- Global scope --
OP_CONSTANT index 0, value <fn main>
OP_DEFINE_GLOBAL index 0
OP_GET_GLOBAL index 0
OP_CALL index 0

================

code:
fn main() {
    if true and false { print "yes" }
}

expect:
-- main --
OP_TRUE
OP_JUMP_IF_FALSE 1 -> 6
OP_POP
OP_FALSE
OP_JUMP_IF_FALSE 6 -> 16
OP_POP
OP_CONSTANT index 0, value "yes"
OP_PRINT
OP_JUMP 13 -> 17
OP_POP
OP_NULL
OP_RETURN

-- Global scope --
OP_CONSTANT index 0, value <fn main>
OP_DEFINE_GLOBAL index 0
OP_GET_GLOBAL index 0
OP_CALL index 0

================

code:
fn main() {
    if true and false { print "yes" } else { print "no" }
}

expect:
-- main --
OP_TRUE
OP_JUMP_IF_FALSE 1 -> 6
OP_POP
OP_FALSE
OP_JUMP_IF_FALSE 6 -> 16
OP_POP
OP_CONSTANT index 0, value "yes"
OP_PRINT
OP_JUMP 13 -> 20
OP_POP
OP_CONSTANT index 1, value "no"
OP_PRINT
OP_NULL
OP_RETURN

-- Global scope --
OP_CONSTANT index 0, value <fn main>
OP_DEFINE_GLOBAL index 0
OP_GET_GLOBAL index 0
OP_CALL index 0

================


// If as expr

code:
fn main() {
    var a = if true {1} else {2}
}

expect:
-- main --
OP_TRUE
OP_JUMP_IF_FALSE 1 -> 12
OP_POP
OP_CONSTANT index 0, value 1
OP_SCOPE_RETURN index 0
OP_JUMP 9 -> 17
OP_POP
OP_CONSTANT index 1, value 2
OP_SCOPE_RETURN index 0
OP_NULL
OP_RETURN

-- Global scope --
OP_CONSTANT index 0, value <fn main>
OP_DEFINE_GLOBAL index 0
OP_GET_GLOBAL index 0
OP_CALL index 0

================

code:
fn main() {
    var b = if { true } do 5 + 6 else {
        1
    }
}

expect:
-- main --
OP_TRUE
OP_SCOPE_RETURN index 0
OP_JUMP_IF_FALSE 3 -> 15
OP_POP
OP_CONSTANT index 0, value 5
OP_CONSTANT index 1, value 6
OP_ADD_INT
OP_JUMP 12 -> 20
OP_POP
OP_CONSTANT index 2, value 1
OP_SCOPE_RETURN index 0
OP_NULL
OP_RETURN

-- Global scope --
OP_CONSTANT index 0, value <fn main>
OP_DEFINE_GLOBAL index 0
OP_GET_GLOBAL index 0
OP_CALL index 0

================

code:
var a = 1
var b = 2

fn main() {
    var c = if { not true } { 5 + 6 } else {
        var tmp = 1
        print tmp
        tmp = 5
        a + b + tmp
    }
}

expect:
-- main --
OP_TRUE
OP_NOT
OP_SCOPE_RETURN index 0

OP_JUMP_IF_FALSE 4 -> 18
OP_POP
OP_CONSTANT index 0, value 5
OP_CONSTANT index 1, value 6
OP_ADD_INT
OP_SCOPE_RETURN index 0
OP_JUMP 15 -> 38

OP_POP
OP_CONSTANT index 2, value 1
OP_GET_LOCAL index 1
OP_PRINT
OP_CONSTANT index 3, value 5
OP_SET_LOCAL index 1
OP_GET_GLOBAL index 0
OP_GET_GLOBAL index 1
OP_ADD_INT
OP_GET_LOCAL index 1
OP_ADD_INT
OP_SCOPE_RETURN index 1

OP_NULL
OP_RETURN

-- Global scope --
OP_CONSTANT index 0, value 1
OP_DEFINE_GLOBAL index 0
OP_CONSTANT index 1, value 2
OP_DEFINE_GLOBAL index 1
OP_CONSTANT index 2, value <fn main>
OP_DEFINE_GLOBAL index 2
OP_GET_GLOBAL index 2
OP_CALL index 0

================
