fn factory() -> fn() -> void {
    var a = 1
    
    fn capture() { print a }

    return capture
}

fn factory2() -> fn() -> void {
    var a = 1
    
    fn capture() {
        a = a + 1
        print a
    }

    return capture
}

fn factory3() -> fn() -> int {
    var a = 90
    
    fn capture() -> int {
        a = a * 10
        return a
    }

    return capture
}

fn factory4(arg: float) -> fn(float, bool) -> float {
    var a = arg

    fn capture(value: float, cond: bool) -> float {
        if cond and value > a do return 56.
        if not cond and value < a do return 80.

        123.
    }

    return capture
}

fn main() {
    var prod1 = factory()
    prod1() // expect: 1

    var prod2 = factory2()
    prod2() // expect: 2
    prod2() // expect: 3
    prod2() // expect: 4

    var prod3 = factory3()
    print prod3() // expect: 900
    print prod3() // expect: 9000

    var prod4 = factory4(25)
    print prod4(50, true) // expect: 56
    print prod4(4, false) // expect: 80
    print prod4(50, false) // expect: 123

    var prod4_bis = factory4(150)
    print prod4_bis(50, true) // expect: 123
    print prod4_bis(4, false) // expect: 80
    print prod4_bis(50, false) // expect: 80
}

//struct Point {
//    x, y: int
//
//    fn display(self) {
//        print "Point"
//        print self.x
//        print self.y
//        print ""
//    }
//}
//
//struct Poly {
//    pt: Point,
//
//    fn clone(self) -> Self {
//        self.pt.x = 123
//        print self.pt.x
//
//        // self
//        Poly{pt=Point{x=1, y=2}}
//    }
//}
//
//struct Structure {
//    poly: Poly,
//    polys: []Poly,
//}
//
//struct Container {
//    arr: []Point,
//}
//
//fn main() {
//    // Var creation
//    var pt = Point{x=2, y=6}
//    var pts = [pt]
//    var poly = Poly{pt}
//    var structure = Structure{poly, polys=[poly]}
//    var container = Container{arr=pts}
//
//    // Simple identifier mutation
//    //pt.x = 9
//    //print pts[0].x
//    //print poly.pt.x
//    //pt.display()
//
//    // Array access mutation
//    //pts[0].x = 8
//    //print pts[0].x
//    //print poly.pt.x
//    //print container.arr[0].x
//    //pt.display()
//    //
//    //pts[0] = Point{x=3, y=7}
//    //container.arr[0].display()
//
//
//    // Field chain access
//    //var polyRef = structure.poly
//    //var ptRef = structure.poly.pt
//    //
//    //structure.poly.pt.y = 99
//    //print polyRef.pt.y
//    //print ptRef.y
//
//    // Field access
//    //poly.pt = Point{x=5, y=8}
//    //print structure.poly.pt.y
//    //
//    //structure.polys[0].pt.x = 5
//    //poly.pt.display()
//    //structure.polys[0].pt.display()
//
//    // In rhs
//    var tmp = poly.clone()
//    //print poly.pt.x
//    //print structure.poly.pt.x
//
//    //var tmp2 = structure.poly.clone()
//}
