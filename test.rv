// struct Point {
//     x, y: int,
//     past: [][]int,
// }
//
// struct Poly {
//     vertex: [][]Point
// }
//
// struct Object {
//     poly: Poly,
//     name: str = "object",
// }
//
// fn main() {
//     var p1 = Point{ x = 1, y = 2, past = [[1, 2], [3, 4]]}
//     var p2 = Point{ x = 5, y = 6, past = [[7, 8], [9, 10]]}
//     var p3 = Point{ x = 11, y = 12, past = [[13, 14], [15, 16]]}
//     var p4 = Point{ x = 17, y = 18, past = [[19, 20], [21, 22]]}
//
//     var poly = Poly{ vertex = [[p1, p2], [p3, p4]] }
//     var obj = Object{ poly }
//
//     print obj.poly.vertex[1][0]
//     print obj.poly.vertex[1][0].x
//     print obj.poly.vertex[1][0].past[0]
//     print obj.poly.vertex[1][0].past[1][1]
//
//     obj.poly.vertex[1][0].past[0] = [55, 66]
//     var ref = obj.poly.vertex[1][0].past[0]
//     ref[0] = 1234
//     print obj.poly.vertex[1][0].past[0]
// }
//

// fn main() {
//     var arr = [1, 2, 3]
//
//     // Late assign
//     print "Test 1"
//     var arrRef: []int
//     arrRef = arr
//
//     print arrRef // [1, 2, 3]
//     arrRef[1] = 1234567
//     print arrRef // [1, 1234567, 3]
//     print arr // [1, 2, 3]
//
//     // Direct assign
//     print "Test 2"
//     var arrRef2 = arr
//     print arrRef2 // [1, 2, 3]
//     arrRef2[1] = 10101010
//     print arrRef2 // [1, 10101010, 3]
//     print arr // [1, 2, 3]
//
//     // Mutates the original object late assign
//     print "Test 3"
//     var arrRef3: []int
//     arrRef3 = arr
//     print arrRef3 // [1, 2, 3]
//     arr[0] = 98765
//     print arrRef3 // [1, 2, 3]
//     print arr // [98765, 2, 3]
//
//     // Mutates the original object direct assign
//     print "Test 4"
//     var arrRef4 = arr
//     print arrRef4 // [98765, 2, 3]
//     arr[0] = 192837
//     print arrRef4 // [98765, 2, 3]
//     print arr // [192837, 2, 3]
// }

// fn main() {
//     var arr = [[1, 2, 3], [4, 5, 6]]
//     print arr // [[1, 2, 3], [4, 5, 6]]
//
//     var arrRef: []int
//     arrRef = arr[1]
//     print arrRef // [4, 5, 6]
//
//     arrRef[1] = 1234
//     print arr // [[1, 2, 3], [4, 5, 6]]
//     print arrRef // [4, 1234, 6]
//
//     print "Test 2"
//     var arrRef2 = arr[0]
//     print arrRef2 // [1, 2, 3] 
//     arr[0][2] = 666
//     print arr // [[1, 2, 666], [4, 5, 6]]
//     print arrRef2 // [1, 2, 3]
// }

// struct Foo {data: []int, data2: [][]int}
// fn main() {
//     var foo = Foo{data=[1, 2], data2=[[1, 2, 3], [4, 5, 6]]}
    // foo.data = [10, 20]

    // print "Test 1"
    // var ref = foo.data
    // foo.data[0] = 9
    // print ref // [10, 20]
    // print foo.data // [9, 20]

    // print "Test 2"
    // ref = foo.data
    // print ref // [10, 20]
    // ref[1] = 98
    // print ref // [10, 98]
    // print foo.data // [10, 20]

    // print "Test 3" 
    // print foo.data2 // [[1, 2, 3], [4, 5, 6]]
    // var ref2 = foo.data2[1]
    // print ref2 // [[1, 2, 3], [4, 5, 6]]
    // ref2[1] = 56
    // print foo.data2 // [[1, 2, 3], [4, 5, 6]]
    // print ref2 // [4, 56, 6]

//     print "Test 4" 
//     print foo.data2 // [[1, 2, 3], [4, 5, 6]]
//     var ref2 = foo.data2[1]
//     print ref2 // [[1, 2, 3], [4, 5, 6]]
//     foo.data2[1][2] = 56
//     print foo.data2 // [[1, 2, 3], [4, 5, 56]]
//     print ref2 // [4, 5, 6]
// }


struct Point {
    x, y: int
}

struct Data {
    list: []float,
}

fn getIdx() -> int { 2 }

fn main() {
    // Index test
    // var arr: []int = [1, 2,]

    // print arr[0]
    // print arr[1]
    // print arr[-1]
    // print arr[-2]

    var pt1 = Point{x=1, y=2}
    var pt2 = Point{x=3, y=4}

    // // Object array test
    var vertex = [pt1, pt2]
    // print vertex
    // print vertex[0]
    // print vertex[0].x
    // // Here, we test that we do a deep copy and not just passing reference
    // pt1.x = 9
    // print pt1.x
    print vertex[0].x

    // var data = Data{list=[1., 4., 567.43]}
    // print data.list
    // print data.list[getIdx()]
    // data.list[getIdx() - 1] = 65.
    // print data.list[1]
}