struct Person {
    age: int,

    fn speak(self) {
        self.age = self.age * 10
        print self.age
    }

    fn getOld(self, amount: int) -> int {
        self.age = self.age + amount
        self.age
    }
}

fn oui() {
    print "oui"
}

fn main() {
    var p = Person{age=5}

    // Mess up with stack
    var a = 5

    var method1: fn() -> void 
    method1 = p.speak
    var method2: fn() -> void = p.speak
    var method3 = p.speak

    method1()
    oui()

    p.speak()
    method2()
    _ = p.getOld(8)
    method3()
}


// --------- Cow ----------

//     Array simple

// fn main() {
//     var arr = [1, 2]
//     var ref = arr
//     arr[0] = 4
//
//     // When overwritting it, no cow or change to the other, it's anyway a brand new object
//     arr = [8]
// }


//     Field simple
// struct Foo { a: int }
// fn main() {
//     var foo = Foo{a=1}
//     var ref = foo
//     foo.a = 8
//
//     print foo.a
//     print ref.a
// }



// ---------- Runtime switch on functions

// struct Person {
//     // Method
//     fn speak(self, a: int) { }
//     // Static
//     fn otherSpeak(a: int) {}
//
//     fn getSpeak(self) -> fn(int) -> void {
//         if (true) {
//             return self.speak
//         } else return Person.otherSpeak
//     }
// }


// ---------- Closure

// fn main() {
//     var a = 3
//     var closure = || { print a }
//     closure()
// }


// ---------- Cow

//struct Point {
//    x, y: int
//
//    fn display(self) {
//        print "Point"
//        print self.x
//        print self.y
//        print ""
//    }
//}
//
//struct Poly {
//    pt: Point,
//
//    fn clone(self) -> Self {
//        self.pt.x = 123
//        print self.pt.x
//
//        // self
//        Poly{pt=Point{x=1, y=2}}
//    }
//}
//
//struct Structure {
//    poly: Poly,
//    polys: []Poly,
//}
//
//struct Container {
//    arr: []Point,
//}
//
//fn main() {
//    // Var creation
//    var pt = Point{x=2, y=6}
//    var pts = [pt]
//    var poly = Poly{pt}
//    var structure = Structure{poly, polys=[poly]}
//    var container = Container{arr=pts}
//
//    // Simple identifier mutation
//    //pt.x = 9
//    //print pts[0].x
//    //print poly.pt.x
//    //pt.display()
//
//    // Array access mutation
//    //pts[0].x = 8
//    //print pts[0].x
//    //print poly.pt.x
//    //print container.arr[0].x
//    //pt.display()
//    //
//    //pts[0] = Point{x=3, y=7}
//    //container.arr[0].display()
//
//
//    // Field chain access
//    //var polyRef = structure.poly
//    //var ptRef = structure.poly.pt
//    //
//    //structure.poly.pt.y = 99
//    //print polyRef.pt.y
//    //print ptRef.y
//
//    // Field access
//    //poly.pt = Point{x=5, y=8}
//    //print structure.poly.pt.y
//    //
//    //structure.polys[0].pt.x = 5
//    //poly.pt.display()
//    //structure.polys[0].pt.display()
//
//    // In rhs
//    var tmp = poly.clone()
//    //print poly.pt.x
//    //print structure.poly.pt.x
//
//    //var tmp2 = structure.poly.clone()
//}
